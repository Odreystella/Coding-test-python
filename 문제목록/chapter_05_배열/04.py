'''
문제 04 모의고사

난이도: ⭐️
저자 권장 시간: 30분
권장 시간 복잡도: O(N)
출제: 프로그래머스 - 완전탐색
정답률: 62%
날짜: 2024-05-30 목요일

제약조건:
    - 시험은 최대 10,000 문제로 구성되어 있습니다.
    - 문제의 정답은 1, 2, 3, 4, 5 중 하나입니다.
    - 가장 높은 점수를 받은 사람이 여럿이라면 반횐하는 값을 오름차순으로 정렬하세요.

입출력의 예: 입력 -> 출력
    - [1, 2, 3, 4, 5] -> [1]
    - [1, 3, 2, 4, 2] -> [1, 2, 3]
'''


# 저자 풀이
def solution(answers):
    patterns = [
        [1, 2, 3, 4, 5],
        [2, 1, 2, 3, 2, 4, 2, 5],
        [3, 3, 1, 1, 2, 2, 4, 4, 5, 5]
    ]
    scores = [0] * 3
    for i, answer in enumerate(answers): # O(N) pattern의 길이가 짧기 때문에 O(N²)은 아님
        for j, pattern in enumerate(patterns):
            if answer == pattern[i % len(pattern)]: # 정답과 패턴을 비교하는 로직
                scores[j] += 1

    max_score = max(scores)
    result = []
    for i, score in enumerate(scores):
        if score == max_score:
            result.append(i + 1)
    return result


# TEST 코드 입니다. 주석을 풀고 실행시켜보세요
# print(solution([1, 2, 3, 4, 5])) # 반환값 : [1]
# print(solution([1, 3, 2, 4, 2])) # 반환값 : [1, 2, 3]
# print(solution([1, 3, 2, 4, 2, 1])) # 반환값 : [1]


'''
Note:
- 권장시간 내에 아이디어가 안떠올라서 풀이를 보고 코드를 이해하려고 했다.
- 정답과 수포자들의 패턴을 비교하는 로직에서 answer == pattern[i % len(pattern)] 이 부분을 어떻게 바로 떠올리나 해서
- 코딩테스트에서 %를 쓰는 부분을 gpt에게 물어봤더니 나머지 패턴과 주기적인 패턴을 다루는 상황에서 %를 많이 쓴다고 한다.
    - 1. 나머지 연산
        - 3 % 5 = 3
    - 2. 짝수 또는 홀수 확인
        - number % 2 == 0이면 짝수, 1이면 홀수
    - 3. 주기적인 작업 수행
        - 예를 들어 리스트를 순회하며 매 3번째 요소마다 뭔가 해주고 싶을 때
        - if i % 3 == 0를 활용하면 가능
    - 4. 순환 구조 구현
        - 리스트나 배열을 순환할 때 % 연산자를 사용하여 인덱스를 계산할 수 있다. 
        - 인덱스가 리스트의 길이를 넘어설 경우 처음으로 되돌아가게 하는 데 유용
    - 5. 특정 조건에 맞는 요소 선택
        - 리스트에서 인덱스가 짝수/홀수 요소만 선택하거나 필터링할 때
    - 6. 날짜와 시간 계산
        - 날짜와 시간 계산에서 주기적인 패턴을 계산할 때
        - 월~일 요일 리스트가 있을 떄, 10일 후의 요일은 무엇인지 계산할 때 10 % 7하면 3번째 인덱스의 요일이 됨
- 최종 시간복잡도는 O(N)
''' 
